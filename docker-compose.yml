version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: trustedlegal_db
      POSTGRES_USER: trustedlegal_user
      POSTGRES_PASSWORD: trustedlegal_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trustedlegal_user -d trustedlegal_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-docker-secret-key-change-in-production
      - ALLOWED_HOSTS=*
      - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:3000,http://localhost:80,http://localhost:83,http://frontend
      - DATABASE_URL=postgresql://trustedlegal_user:trustedlegal_password@db:5432/trustedlegal_db
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 legal_backend.wsgi:application"

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_API_TIMEOUT=30000
        - REACT_APP_ENVIRONMENT=development
    ports:
      - "83:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_API_TIMEOUT=30000
      - REACT_APP_ENVIRONMENT=development

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  default:
    driver: bridge